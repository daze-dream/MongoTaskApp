original code to insert things
    // db.collection('tasks').insertMany([
    //     {
    //         description: 'gather morning dew for the weathermancer',
    //         completed: true
    //     },
    //     {
    //         description: 'collect four crickets for the weathermancer',
    //         completed: false
    //     }
    // ], (error, result) => {
    //     if(error)
    //         console.log('unable to add data');
    //     console.log(result.insertedIds)
    // })
    // db.collection('users').insertOne( {
    //     _id: id,
    //     name: 'Kalissa',
    //     age: 99
    // }, (error, result) => {
    //     console.log(result.insertedId)
    // })

original code for finding things
    //mongodb automatically creates a new collection if it doesn't exist as well.
    //can "SELECT" with a JSON collection object specifying parameters. If want to search by _id, wrap the string in 'new objectID()'
    db.collection('users').findOne( {name: 'Kalissa'}, (error, data) => {
        if(error)
            console.log('error with database');
        console.log(data);
    })
    //when finding multiple, we get a cursor (pointer) to the data instead, that we can then call operations on - that's where the callback funtion exists.
    // EX: here we use toArray, but can use count or limit to a specific number so we don't have to store everything in memory.
    db.collection('tasks').find({completed: false}).toArray( (error, data) => {
        console.log(data);

original code for updating

    // db.collection('users').updateOne({
    //     _id: new ObjectID("61535012018de8f3d55791f2")
    // }, {
    //     $set: {
    //         name: 'Roxia'
    //     }
    // }).then((result) => {
    //     console.log(result);

    // }).catch((error) => {
    //     console.log(error);
    // })
    db.collection('tasks').updateMany({
        completed: false
    }, {
        $set: {
            completed: true
        }
    }).then((result) => {
        console.log(result.modifiedCount)
    }).catch((error) => {
        console.log(error)
    })

original code for deleting objects
    db.collection('users').deleteMany({
        age: 87
    }).then((result)=> {
        console.log(result)
    }).catch((error) => {
        console.log(error)
    })

original old non-async-await method for putting in a new user
    // user.save().then(() => {
    //     console.log('Successful save from request: ', req.body)
    //     res.status(201).send(user);
    // }).catch((e) => {
    //     console.log('Error from request: ', req.body)
    //     res.status(400).send(e);
    // })

original code for getting a user by id
router.get('/users/:id', async (req, res) => {
    const _id = req.params.id;
    var dateOBJ = new Date();
    var date = dateOBJ.toLocaleDateString();
    var time = dateOBJ.toLocaleTimeString();
    try {
        const user = await User.findById(_id);
        if(!user){
            console.log(date + '/' + time + ': Bad user search by ID: ', _id);
            return res.status(404).send('No user found');
        }

        console.log(date + '/' + time + ': successful query of user with ID' + _id)
        res.send(user)
    } catch (e) {
        if(e.name === 'CastError'){
            return res.status(400).send('Invalid id')
        }
        console.log( date + '/' + time +': internal server error', e);
        res.status(500).send(e)

    }
})